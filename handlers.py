from time import time

from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram_broadcaster import TextBroadcaster
from aiogram_dialog import StartMode, DialogManager

from config import ADMIN
from database import DB
from database.models import User
from dialogs.states import Admin, Main


async def start(message: types.Message, dialog_manager: DialogManager):
    await message.answer(
        'üåü<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ PRconf24 - –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —ç—Ç–æ–π –∑–∏–º—ã!</b> üëã\n',
        parse_mode='html',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')]], resize_keyboard=True)
    )

async def schedule(message: types.Message, dialog_manager: DialogManager):
    await message.answer(
        "<b>3 —è–Ω–≤–∞—Ä—è</b>\n\n"
        "<b>18:00</b> ‚Äì –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø + –∫–æ—Ñ–µ, –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã\n" 
        "<b>18:30</b> ‚Äì –ü–†–ò–í–ï–¢–°–¢–í–ò–ï\n"
        "<b>18:50</b> ‚Äì–ª–µ–¥–æ–∫–æ–ª—å—á–∏–∫\n"
        "–°–ï–°–°–ò–Ø No1 (–ú–∞–∫—Å –ß–µ–ø–µ–ª—å)\n"
        "<b>20:30</b> ‚Äì –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê –ù–û–ß–õ–ï–ì + –î–û–ú–ê–®–ö–ê\n\n"
        "<b>4 —è–Ω–≤–∞—Ä—è</b>\n\n"
        "<b>9:00</b> ‚Äì –∫–æ—Ñ–µ, –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã\n"
        "<b>9:30</b> ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –º–æ–ª–∏—Ç–≤–∞\n"
        "<b>10:00</b> ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n" 
        "<b>11:00</b> - COFFEE-BREAKE\n"
        "<b>11:20</b> - –°–ï–°–°–ò–Ø No2 - (?)\n"
        "<b>12:30</b> ‚Äì –û–ë–ï–î\n"
        "<b>13:30</b> ‚Äì –∫–≤–∏–∑\n"
        "<b>14:30</b> - –ö–û–§–ï, –ü–ï–ß–ï–ù–¨–ö–ò\n"
        "<b>15:00</b> - –°–ï–°–°–ò–Ø No 3 (–ü–∞—à–∞ –í–æ–ª–æ–∂–∞–Ω–∏–Ω)\n"
        "<b>16:30</b> ‚Äì –£–ñ–ò–ù/–û–ë–©–ê–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø\n"
        "<b>17:00</b> - –†–ê–ó–™–ï–ó–î\n",
        parse_mode='html'
    )


async def adm_handler(message: types.Message, dialog_manager: DialogManager):
    if await DB.get_user(message.from_user.id).role == "ADMIN":
        await dialog_manager.start(state=Admin.menu, mode=StartMode.RESET_STACK)

async def clear_cache(message: types.Message, dialog_manager: DialogManager):
    if message.from_user.id == ADMIN:
        await dialog_manager.start(state=Admin.clear_cache, mode=StartMode.RESET_STACK)



async def errors_handler(u: types.Update, e: Exception):
    await TextBroadcaster(
        chats=ADMIN, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e.__class__.__name__}({e})"
    ).run()